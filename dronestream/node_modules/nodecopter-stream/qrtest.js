#!/usr/bin/env node

'use strict';

var fs = require('fs')
  , util   = require('util')
  , Stream = require('stream').Stream
  , buffy  = require('buffy')
  , writeStream = fs.createWriteStream('out1')
  , readStream
  , parser
  ;

util.inherits(FileParser, Stream);

function FileParser() {
    var that = this;
    Stream.call(this);
    this.writable = true;
    this.readable = true;
    this._parser = buffy.createReader();
}

FileParser.prototype.write = function (buffer) {
    var parser = this._parser;
    parser.write(buffer);
    while (true) {
        if (parser.bytesAhead() < 1000) {
            return;
        }
        var ret = parser.buffer(1000);
        this.emit('data', ret);
        return true;
    }
};

FileParser.prototype.poll = function () {
    if (this._parser.bytesAhead() < 300) {
        return;
    }
    this.emit('data', this._parser.buffer(300));
}

FileParser.prototype.end = function (indata) {
    return this.emit('data', this._parser.buffer(this._parser.bytesAhead()));
    // nothing to do, just here so pipe() does not complain
};


parser = new FileParser();
parser.pipe(writeStream);
readStream = fs.createReadStream(process.argv[2]);
readStream.pause();
readStream.pipe(parser);
readStream.resume();

